<!DOCTYPE html>
<html lang="vi">
    <head>
        <meta charset="UTF-8" />
        <meta name="viewport" content="width=device-width, initial-scale=1.0" />
        <title><%= title %></title>
        <link rel="stylesheet" href="/stylesheets/style.css" />
    </head>

    <body>
        <div class="container">
            <h1>T√¨m ki·∫øm h√¨nh ·∫£nh</h1>
            <div class="card">
                <h3>Upload h√¨nh ·∫£nh</h3>
                <form id="uploadForm">
                    <label>Ch·ªçn h√¨nh ·∫£nh (jpeg, png, gif, webp, ‚â§10MB)</label>
                    <input id="imageInput" name="image" type="file" accept="image/jpeg,image/png,image/gif,image/webp" required />
                    <label>Ti√™u ƒë·ªÅ</label>
                    <input name="title" type="text" placeholder="Ti√™u ƒë·ªÅ (t√πy ch·ªçn)" />
                    <label>M√¥ t·∫£</label>
                    <textarea name="description" placeholder="M√¥ t·∫£ (t√πy ch·ªçn)"></textarea>
                    <label>Tags (ph√¢n t√°ch b·ªüi d·∫•u ph·∫©y)</label>
                    <input name="tags" type="text" placeholder="vd: cat, animal" />
                    <div class="sep"></div>
                    <div class="flex">
                        <button class="btn btn-grad" id="uploadBtn" type="submit">Upload</button>
                        <span id="uploadMsg" class="muted"></span>
                    </div>
                </form>
            </div>

            <div class="card">
                <h3>T√¨m ki·∫øm</h3>
                <form id="unifiedSearch" class="flex" enctype="multipart/form-data" style="gap: 8px; align-items: stretch">
                    <input id="q" type="text" placeholder="Nh·∫≠p t·ª´ kh√≥a... (ƒë·ªÉ tr·ªëng n·∫øu t√¨m b·∫±ng ·∫£nh)" />
                    <button id="cameraBtnUnified" class="btn btn-search" type="button" title="T√¨m b·∫±ng h√¨nh ·∫£nh"><span>üì∑</span></button>
                    <input id="imageInputUnified" name="image" type="file" accept="image/*" style="display: none" />
                    <input id="imgUrlUnified" type="text" placeholder="URL ·∫£nh (t√πy ch·ªçn)" />
                    <select id="method" title="Ph∆∞∆°ng ph√°p">
                        <option value="auto" selected>T·ª± ƒë·ªông</option>
                        <option value="hash">Hash</option>
                        <option value="clip">CLIP (ng·ªØ nghƒ©a)</option>
                    </select>
                    <button id="searchBtn" class="btn btn-grad" type="submit">T√¨m</button>
                </form>
                <div class="muted">Ch·ªçn ·∫£nh b·∫±ng üì∑ ho·∫∑c d√°n URL; n·∫øu kh√¥ng c√≥ ·∫£nh, h·ªá th·ªëng s·∫Ω t√¨m theo t·ª´ kh√≥a. Ph∆∞∆°ng ph√°p "T·ª± ƒë·ªông" ∆∞u ti√™n CLIP.</div>
                <div id="resultsInfo" class="muted" style="margin-top: 8px"></div>
                <div id="results" class="grid" style="margin-top: 12px"></div>
            </div>
        </div>

        <script type="text/javascript">
            const uploadForm = document.getElementById("uploadForm");
            const uploadBtn = document.getElementById("uploadBtn");
            const uploadMsg = document.getElementById("uploadMsg");
            uploadForm.addEventListener("submit", async (e) => {
                e.preventDefault();
                uploadMsg.textContent = "";
                const file = document.getElementById("imageInput").files[0];
                if (!file) {
                    uploadMsg.textContent = "Vui l√≤ng ch·ªçn ·∫£nh";
                    uploadMsg.className = "error";
                    return;
                }
                if (file.size > 10 * 1024 * 1024) {
                    uploadMsg.textContent = "File qu√° l·ªõn (>10MB)";
                    uploadMsg.className = "error";
                    return;
                }
                uploadBtn.disabled = true;
                const fd = new FormData(uploadForm);
                try {
                    const resp = await fetch("/api/upload", {
                        method: "POST",
                        body: fd,
                    });
                    const data = await resp.json();
                    if (!resp.ok || !data.success) throw new Error(data.error || "Upload th·∫•t b·∫°i");
                    uploadMsg.textContent = "Upload th√†nh c√¥ng (ID: " + data.imageId + ")";
                    uploadMsg.className = "success";
                } catch (err) {
                    uploadMsg.textContent = err.message;
                    uploadMsg.className = "error";
                } finally {
                    uploadBtn.disabled = false;
                }
            });

            // Unified search logic (keyword + image)
            const results = document.getElementById("results");
            const resultsInfo = document.getElementById("resultsInfo");
            const unifiedForm = document.getElementById("unifiedSearch");
            const methodSelect = document.getElementById("method");
            const cameraBtnUnified = document.getElementById("cameraBtnUnified");
            const imageInputUnified = document.getElementById("imageInputUnified");
            const imgUrlUnified = document.getElementById("imgUrlUnified");

            function renderImages(list, meta = {}) {
                results.innerHTML = "";
                (list || []).forEach((img) => {
                    const el = document.createElement("div");
                    el.className = "item";
                    const footer =
                        meta.method === "clip"
                            ? "Cosine: " + Number(img.similarity ?? 0).toFixed(3)
                            : img.distance != null
                            ? "Hamming: " + img.distance + " ‚Ä¢ Sim: " + Math.round((img.similarity || 0) * 100) + "%"
                            : "";
                    const idTag = img.imageId || img.id;
                    el.innerHTML = `<img src="${img.url}" alt="" />
                        <div class="meta">
							<div class="tag">#${idTag}</div>
                        ${img.title || ""}
                        ${footer ? `<div class="muted">${footer}</div>` : ""}
                        	<div class="flex" style="margin-top:6px">
                        		<button data-id="${idTag}" class="similar-btn">T√¨m ·∫£nh t∆∞∆°ng t·ª±</button>
                        	</div>
                        </div>`;
                    results.appendChild(el);
                });
                // attach similar handlers
                results.querySelectorAll(".similar-btn").forEach((btn) => {
                    btn.addEventListener("click", async (ev) => {
                        const id = ev.currentTarget.getAttribute("data-id");
                        try {
                            resultsInfo.textContent = "ƒêang t√¨m ·∫£nh t∆∞∆°ng t·ª±...";
                            const r = await fetch("/api/image/" + id + "/similar?threshold=16&topK=24");
                            const data = await r.json();
                            renderImages(data.results || [], {
                                method: "hash",
                            });
                            resultsInfo.textContent = "K·∫øt qu·∫£ ·∫£nh t∆∞∆°ng t·ª± (" + (data.results?.length || 0) + ")";
                            window.scrollTo({
                                top: unifiedForm.offsetTop,
                                behavior: "smooth",
                            });
                        } catch (err) {
                            resultsInfo.textContent = "L·ªói t√¨m ·∫£nh t∆∞∆°ng t·ª±: " + err.message;
                        }
                    });
                });
            }

            cameraBtnUnified.addEventListener("click", () => imageInputUnified.click());
            imageInputUnified.addEventListener("change", async () => {
                const file = imageInputUnified.files[0];
                if (!file) return;
                resultsInfo.textContent = "ƒêang t√¨m b·∫±ng ·∫£nh...";
                const fd = new FormData();
                fd.append("image", file);
                const method = methodSelect.value;
                const ep = method === "clip" || method === "auto" ? "/api/search-by-image?method=clip&minSim=0.25&topK=24" : "/api/search-by-image?threshold=16&topK=24";
                try {
                    const resp = await fetch(ep, { method: "POST", body: fd });
                    const data = await resp.json();
                    renderImages(data.results || [], {
                        method: data.method || (method === "clip" || method === "auto" ? "clip" : "hash"),
                    });
                    resultsInfo.textContent = "T√¨m th·∫•y " + (data.results?.length || 0) + " ·∫£nh";
                } catch (err) {
                    resultsInfo.textContent = "L·ªói t√¨m ki·∫øm ·∫£nh: " + err.message;
                } finally {
                    imageInputUnified.value = "";
                }
            });

            unifiedForm.addEventListener("submit", async (e) => {
                e.preventDefault();
                results.innerHTML = "";
                const q = document.getElementById("q").value.trim();
                const file = imageInputUnified.files[0];
                const imgUrl = imgUrlUnified.value.trim();
                const method = methodSelect.value;
                try {
                    if (file || imgUrl) {
                        // Image-based search
                        resultsInfo.textContent = "ƒêang t√¨m b·∫±ng ·∫£nh...";
                        let resp;
                        const ep = method === "clip" || method === "auto" ? "/api/search-by-image?method=clip&minSim=0.25&topK=24" : "/api/search-by-image?threshold=16&topK=24";
                        if (file) {
                            const fd = new FormData();
                            fd.append("image", file);
                            resp = await fetch(ep, {
                                method: "POST",
                                body: fd,
                            });
                        } else {
                            resp = await fetch(ep, {
                                method: "POST",
                                headers: { "Content-Type": "application/json" },
                                body: JSON.stringify({ url: imgUrl }),
                            });
                        }
                        const data = await resp.json();
                        renderImages(data.results || [], {
                            method: data.method || (method === "clip" || method === "auto" ? "clip" : "hash"),
                        });
                        resultsInfo.textContent = "T√¨m th·∫•y " + (data.results?.length || 0) + " ·∫£nh";
                    } else {
                        // Keyword search
                        resultsInfo.textContent = "ƒêang t√¨m theo t·ª´ kh√≥a...";
                        const r = await fetch("/api/search?q=" + encodeURIComponent(q));
                        const data = await r.json();
                        renderImages(data.images || [], { method: "keyword" });
                        resultsInfo.textContent = "T·ªïng: " + (data.pagination?.total || 0);
                    }
                } catch (err) {
                    resultsInfo.textContent = "L·ªói t√¨m ki·∫øm: " + err.message;
                }
            });
        </script>
    </body>
</html>
